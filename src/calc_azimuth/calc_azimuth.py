# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CalcAzimuth
                                 A QGIS plugin
 Calculate azimuth 2 points
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-02-12
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Jose
        email                : jose@ua.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import Qt, QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon,QColor
from PyQt5.QtWidgets import QAction,QMessageBox
from qgis.core import Qgis,QgsCoordinateReferenceSystem, QgsCoordinateTransform, QgsProject, QgsGeometry,QgsLineString, QgsPoint, QgsPointXY, QgsWkbTypes, QgsDistanceArea
from qgis.gui import QgsMapToolEmitPoint, QgsRubberBand
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .calc_azimuth_dialog import CalcAzimuthDialog
import os.path
import math


class CalcAzimuth:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        self.canvas = self.iface.mapCanvas() 
        self.pointTool = QgsMapToolEmitPoint(self.canvas)
        self.pointTool2 = QgsMapToolEmitPoint(self.canvas)
        
      
        
    
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'CalcAzimuth_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Calculate Azimuth')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'&Calculate Azimuth')
        self.toolbar.setObjectName(u'&Calculate Azimuth')
        
        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.dlg = CalcAzimuthDialog()
        # dialog siempre en primer plano 
        self.dlg.setWindowFlags(Qt.WindowStaysOnTopHint)        
        

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('CalcAzimuth', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/calc_azimuth/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Calculate azimuth'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        
        #result = self.pointTool.canvasClicked.connect(self.display_point)
        #result = self.pointTool.canvasClicked.connect(self.display_point)
        #result = self.pointTool.canvasClicked.connect(self.display_point)  #modification4
        #QMessageBox.information( self.iface.mainWindow(),"Info", "connect = %s"%str(result) )    #modification 5
        self.dlg.pushButton1.clicked.connect(self.pushPto1)
        self.dlg.pushButton2.clicked.connect(self.pushPto2)
        
        


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Calculate Azimuth'),
                action)
            self.iface.removeToolBarIcon(action)
            
    

    def pushPto1(self):
        #QMessageBox.information( self.iface.mainWindow(),"Info", "hola pto 1" )
        self.canvas.setMapTool(self.pointTool)
        self.pointTool.canvasClicked.connect( self.punto1 )      
    
    
    def punto1(self, pointTool):
        coords = "{}, {}".format(pointTool.x(), pointTool.y())
        # dibujar punto
        ptRb = QgsRubberBand(self.canvas, False)
        ptRb.setColor(QColor(0,0,255))
        ptRb.setIconSize(7)
        ptRb.setWidth(5)
        ptRb.addPoint( QgsPointXY(pointTool.x(), pointTool.y()) )        
        # poner el texto del punto
        self.dlg.lineEdit1.setText(str(coords))         

    def pushPto2(self):
        #QMessageBox.information( self.iface.mainWindow(),"Info", "hola pto 1" )
        self.canvas.setMapTool(self.pointTool2)
        self.pointTool2.canvasClicked.connect( self.punto2 ) 
        self.iface.messageBar().pushMessage("", "Haz click en pto 2", level=Qgis.Info, duration=1)
    
    
    def punto2(self, pointTool2):
        coords2 = "{}, {}".format(pointTool2.x(), pointTool2.y())
        # dibujar punto
        ptRb = QgsRubberBand(self.canvas, False)
        ptRb.setColor(QColor(0,255,0))
        ptRb.setIconSize(7)
        ptRb.setWidth(5)
        ptRb.addPoint( QgsPointXY(pointTool2.x(), pointTool2.y()) )    
        # poner el texto del punto
        self.dlg.lineEdit2.setText(str(coords2))     


     
        

    
    def rumbo(x1,y1,x2,y2):
        # calculos
        if ((x1 == x2) and (y1 - y2) < 0 ):
            #print("Es vertical")
            a = 0
        elif ((x1 == x2) and (y1 - y2) > 0 ):
            #print("Es vertical")
            a = 180
        elif ((y1 == y2) and (x1 - x2) < 0 ):
            #print("Es horizontal")
            a = 90
        elif ((y1 == y2) and (x1 - x2) > 0 ):
            #print("Es horizontal")
            a = 270
        elif ((x1 != x2) and (x1-x2) < 0 and (y1-y2) < 0 ):
            #print("Es diagonal en sentido i/f")
            h = math.sqrt( math.pow((x1-x2),2) + math.pow((y1-y2),2) )
            sinx = math.fabs(x1-x2)/h
            a = math.degrees(math.asin(sinx))
        else:
            #print("Es diagonal en sentido f/i")
            h = math.sqrt( math.pow((x1-x2),2) + math.pow((y1-y2),2) )
            sinx = math.fabs(x1-x2)/h
            a = 360-( math.degrees(math.asin(sinx)) ) 
        return a    
 
    # Calcula el rumbo
    def azimuth(self):            
        punto1 = self.dlg.lineEdit1.text()
        punto2 = self.dlg.lineEdit2.text()

        if (punto1 == "" or punto2 == ""):
            QMessageBox.information( self.iface.mainWindow(),"Error", "Without coordinates" )
        else:
            x1 = float(punto1.split(",")[0])
            y1 = float(punto1.split(",")[1])
            x2 = float(punto2.split(",")[0])
            y2 = float(punto2.split(",")[1]) 
            
            # create points objects
            p1 = QgsPoint(x1,y1)
            p2 = QgsPoint(x2,y2)
            az = round(p1.azimuth(p2),2)
            if (az < 0):
                self.dlg.lineEditAzimuth.setText(str(az) + "  ("+str(360+az)+")")
            else:
                self.dlg.lineEditAzimuth.setText( str(az) )
            # calculate distance
            points = [p1,p2]
            line = QgsGeometry.fromPolyline(points)
            d = QgsDistanceArea()
            crs = QgsProject.instance().crs() # asigna el crs del proyecto
            # comprobar si es dd (6)
            if (crs.mapUnits() == 6):
                # es dd
                d.setEllipsoid('WGS84')
                m = round(d.measureLength(line),4)
            else:# projectada
                m = round(d.measureLength(line),4)
            self.dlg.lineEditDistance.setText(str(m) )
            self.iface.actionPan().trigger()  # vuelve el cursor al pan
            
            #Drawing Polyline
            polyline = QgsRubberBand(self.canvas, False)  # False = not a polygon
            
            points =[ QgsPoint(x1,y1 ), QgsPoint(x2,y2)]
            polyline.setToGeometry(QgsGeometry.fromPolyline(points), None)
            polyline.setColor(QColor(255, 0, 0))
            polyline.setWidth(3)
            """
            # calculos
            if ((x1 == x2) and (y1 - y2) < 0 ):
                #print("Es vertical")
                a = 0
            elif ((x1 == x2) and (y1 - y2) > 0 ):
                #print("Es vertical")
                a = 180
            elif ((y1 == y2) and (x1 - x2) < 0 ):
                #print("Es horizontal")
                a = 90
            elif ((y1 == y2) and (x1 - x2) > 0 ):
                #print("Es horizontal")
                a = 270
            else:
                a = math.atan2(float(x2) - float(x1), float(y2) - float(y1))
                #QMessageBox.information( self.iface.mainWindow(),"Info", "radianes: " + str(a)+ " grados: "+ str(math.degrees(a)) )
            # negativo (De 0 a -180)
            a = round(math.degrees(a),2)
            if a < 0:
                self.dlg.lineEditAzimuth.setText(str(a) + "  ("+str(360+a)+")")
            else:
                self.dlg.lineEditAzimuth.setText(str(a) )
            self.iface.actionPan().trigger()  # vuelve el cursor al pan
            """


    def run(self):
        """Run method that performs all the real work"""
        self.dlg.pushButton1.setIcon(QIcon(':/images/themes/default/mActionMoveFeatureCopyPoint.svg'))
        self.dlg.pushButton2.setIcon(QIcon(':/images/themes/default/mActionMoveFeatureCopyPoint.svg'))
        self.dlg.pushButtonAzimuth.setIcon(QIcon(':/images/themes/default/mActionMeasureAngle.svg'))
        # borrar valores previos
        self.dlg.lineEdit1.clear()
        self.dlg.lineEdit2.clear()
        self.dlg.lineEditAzimuth.clear()
        self.dlg.lineEditDistance.clear()
        
        self.dlg.show()
        self.dlg.pushButton1.clicked.connect(self.pushPto1)
        self.dlg.pushButton2.clicked.connect(self.pushPto2)
        self.dlg.pushButtonAzimuth.clicked.connect(self.azimuth)       
